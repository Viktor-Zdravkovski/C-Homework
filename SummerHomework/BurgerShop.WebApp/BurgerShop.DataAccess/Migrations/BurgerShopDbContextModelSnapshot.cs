// <auto-generated />
using System;
using BurgerShop.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerShop.DataAccess.Migrations
{
    [DbContext(typeof(BurgerShopDbContext))]
    partial class BurgerShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BurgerShop.Domain.Burger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasFries")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Burger");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasFries = true,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Classic Cheeseburger",
                            Price = 8
                        },
                        new
                        {
                            Id = 2,
                            HasFries = false,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Veggie Delight",
                            Price = 9
                        },
                        new
                        {
                            Id = 3,
                            HasFries = true,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "BBQ Bacon Burger",
                            Price = 10
                        },
                        new
                        {
                            Id = 4,
                            HasFries = false,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Mushroom Swiss Burger",
                            Price = 9
                        },
                        new
                        {
                            Id = 5,
                            HasFries = true,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Spicy Black Bean Burger",
                            Price = 8
                        },
                        new
                        {
                            Id = 6,
                            HasFries = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Double Beef Burger",
                            Price = 11
                        },
                        new
                        {
                            Id = 7,
                            HasFries = true,
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Grilled Portobello Burger",
                            Price = 8
                        },
                        new
                        {
                            Id = 8,
                            HasFries = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Chicken Avocado Burger",
                            Price = 10
                        },
                        new
                        {
                            Id = 9,
                            HasFries = true,
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Falafel Burger",
                            Price = 8
                        },
                        new
                        {
                            Id = 10,
                            HasFries = false,
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Fish Fillet Burger",
                            Price = 9
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClosesAt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpensAt")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "22br",
                            ClosesAt = 1,
                            Name = "Ireland",
                            OpensAt = 12
                        },
                        new
                        {
                            Id = 2,
                            Address = "BeverlySt52",
                            ClosesAt = 8,
                            Name = "New York",
                            OpensAt = 12
                        },
                        new
                        {
                            Id = 3,
                            Address = "Drachevo",
                            ClosesAt = 6,
                            Name = "Skopje",
                            OpensAt = 12
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            FullName = "John Doe",
                            IsDelivered = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            FullName = "Jane Smith",
                            IsDelivered = true
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Maple Ave",
                            FullName = "Mike Johnson",
                            IsDelivered = false
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Oak St",
                            FullName = "Emily Davis",
                            IsDelivered = true
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Pine St",
                            FullName = "Chris Brown",
                            IsDelivered = false
                        },
                        new
                        {
                            Id = 6,
                            Address = "987 Cedar St",
                            FullName = "Sarah Wilson",
                            IsDelivered = true
                        },
                        new
                        {
                            Id = 7,
                            Address = "741 Birch St",
                            FullName = "David Lee",
                            IsDelivered = false
                        },
                        new
                        {
                            Id = 8,
                            Address = "852 Spruce St",
                            FullName = "Jessica Taylor",
                            IsDelivered = true
                        },
                        new
                        {
                            Id = 9,
                            Address = "963 Willow St",
                            FullName = "Paul White",
                            IsDelivered = false
                        },
                        new
                        {
                            Id = 10,
                            Address = "159 Aspen St",
                            FullName = "Laura Green",
                            IsDelivered = true
                        },
                        new
                        {
                            Id = 11,
                            Address = "357 Maple St",
                            FullName = "Mark Harris",
                            IsDelivered = false
                        });
                });

            modelBuilder.Entity("BurgerShop.Domain.Burger", b =>
                {
                    b.HasOne("BurgerShop.Domain.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("BurgerShop.Domain.Location", b =>
                {
                    b.HasOne("BurgerShop.Domain.Order", null)
                        .WithMany("Location")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("BurgerShop.Domain.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
